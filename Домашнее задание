/* Напишите программу, которая принимает на вход пятизначное число и проверяет, является ли оно палиндромом.
14212 -> нет
12821 -> да
23432 -> да
*/

Console.Write("Введите пятизначное число ");
string number = Console.ReadLine();

void CheckingNumber(string number) {

if (number[0]==number[4] || number[1]==number[3]){
Console.WriteLine($"Ваше число {number} - является палиндромом");
}
else Console.WriteLine($"Ваше число {number} - не является палиндромом");
}
if (number.Length == 5){
CheckingNumber(number);

}
else Console.WriteLine("Это не пятизначное число");



/* Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в 3D пространстве.
A (3,6,8); B (2,1,-7), -> 15.84
A (7,-5, 0); B (1,-1,9) -> 11.53
*/

Console.WriteLine("Введите координату х1 ");
int x1 = int.Parse(Console.ReadLine());

Console.WriteLine("Введите координату х2 ");
int x2 = int.Parse(Console.ReadLine());

Console.WriteLine("Введите координату z1 ");
int z1 = int.Parse(Console.ReadLine());

Console.WriteLine("Введите координату y1 ");
int y1 = int.Parse(Console.ReadLine());

Console.WriteLine("Введите координату y2 ");
int y2 = int.Parse(Console.ReadLine());

Console.WriteLine("Введите координату z2 ");
int z2 = int.Parse(Console.ReadLine());


Console.WriteLine("Длина отрезка " + GetLength(x1,y1,x2,y2,z1,z2));


double GetLength(int x1, int y1, int x2 , int y2, int z1, int z2) {
double GetLength = Math.Sqrt(Math.Pow((x2-x1), 2) + Math.Pow((y2-y1), 2) + Math.Pow((z2-z1), 2));
return GetLength;
}





/* Напишите программу, которая принимает на вход число (N) и выдаёт таблицу кубов чисел от 1 до N.
3 -> 1, 8, 27
5 -> 1, 8, 27, 64, 125
*/

Console.Write("Введите число ");
int cube = Convert.ToInt32(Console.ReadLine());

void Cube(int[] cube){
  int counter = 0;
  int length = cube.Length;
  while (counter <  length){
    cube[counter] = Convert.ToInt32(Math.Pow(counter, 3));
    counter++;
  }
}

void PrintArry(int[] coll){
  int count = coll.Length;
  int index = 0;
  while(index < count){
    Console.Write(coll[index]+ " ");
    index++;
  }
} 

int[] arry = new int[cube+1];
Cube(arry);
PrintArry(arry);
